{"remainingRequest":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/mayank/gemwork_3/gem-farm/app/gem-farm/src/components/gem-farm/InitFarm.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/src/components/gem-farm/InitFarm.vue","mtime":1649527631518},{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/babel.config.js","mtime":1649527631469},{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1647186788000},{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1647186788000},{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1647186829000},{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1647186788000},{"path":"/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1647186847000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL21heWFuay9nZW13b3JrXzMvZ2VtLWZhcm0vYXBwL2dlbS1mYXJtL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB1c2VXYWxsZXQgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvd2FsbGV0JzsKaW1wb3J0IHVzZUNsdXN0ZXIgZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvY2x1c3Rlcic7CmltcG9ydCB7IGluaXRHZW1GYXJtIH0gZnJvbSAnQC9jb21tb24vZ2VtLWZhcm0nOwppbXBvcnQgeyBQdWJsaWNLZXkgfSBmcm9tICdAc29sYW5hL3dlYjMuanMnOwppbXBvcnQgeyBCTiB9IGZyb20gJ0Bwcm9qZWN0LXNlcnVtL2FuY2hvcic7CmltcG9ydCB7IFJld2FyZFR5cGUgfSBmcm9tICdAZ2Vtd29ya3MvZ2VtLWZhcm0tdHMnOwpleHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoewogIGVtaXRzOiBbJ25ldy1mYXJtJ10sCiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBjdHgpIHsKICAgIHZhciBfdXNlV2FsbGV0ID0gdXNlV2FsbGV0KCksCiAgICAgICAgd2FsbGV0ID0gX3VzZVdhbGxldC53YWxsZXQsCiAgICAgICAgZ2V0V2FsbGV0ID0gX3VzZVdhbGxldC5nZXRXYWxsZXQ7CgogICAgdmFyIF91c2VDbHVzdGVyID0gdXNlQ2x1c3RlcigpLAogICAgICAgIGNsdXN0ZXIgPSBfdXNlQ2x1c3Rlci5jbHVzdGVyLAogICAgICAgIGdldENvbm5lY3Rpb24gPSBfdXNlQ2x1c3Rlci5nZXRDb25uZWN0aW9uOwoKICAgIHZhciBnZjsKICAgIHdhdGNoKFt3YWxsZXQsIGNsdXN0ZXJdLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGluaXRHZW1GYXJtKGdldENvbm5lY3Rpb24oKSwgZ2V0V2FsbGV0KCkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGdmID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkpOyAvL25lZWRlZCBjb3ogbW91bnRzIGxhdGVyCgogICAgb25Nb3VudGVkKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoIShnZXRXYWxsZXQoKSAmJiBnZXRDb25uZWN0aW9uKCkpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gaW5pdEdlbUZhcm0oZ2V0Q29ubmVjdGlvbigpLCBnZXRXYWxsZXQoKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgZ2YgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSk7IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBpbml0IGZhcm0KCiAgICB2YXIgbWludEEgPSByZWYoKTsKICAgIHZhciB0eXBlQSA9IHJlZihSZXdhcmRUeXBlLlZhcmlhYmxlKTsKICAgIHZhciBtaW50QiA9IHJlZigpOwogICAgdmFyIHR5cGVCID0gcmVmKFJld2FyZFR5cGUuRml4ZWQpOwogICAgdmFyIG1pblN0YWtpbmdQZXJpb2RTZWMgPSByZWYoKTsKICAgIHZhciBjb29sZG93blBlcmlvZFNlYyA9IHJlZigpOwogICAgdmFyIHVuc3Rha2luZ0ZlZUxhbXAgPSByZWYoKTsKCiAgICB2YXIgaW5pdEZhcm0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBfeWllbGQkZ2YkaW5pdEZhcm1XYWwsIGZhcm07CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2YuaW5pdEZhcm1XYWxsZXQobmV3IFB1YmxpY0tleShtaW50QS52YWx1ZSksIHR5cGVBLnZhbHVlLCBuZXcgUHVibGljS2V5KG1pbnRCLnZhbHVlKSwgdHlwZUIudmFsdWUsIHsKICAgICAgICAgICAgICAgICAgbWluU3Rha2luZ1BlcmlvZFNlYzogbmV3IEJOKG1pblN0YWtpbmdQZXJpb2RTZWMudmFsdWUpLAogICAgICAgICAgICAgICAgICBjb29sZG93blBlcmlvZFNlYzogbmV3IEJOKGNvb2xkb3duUGVyaW9kU2VjLnZhbHVlKSwKICAgICAgICAgICAgICAgICAgdW5zdGFraW5nRmVlTGFtcDogbmV3IEJOKHVuc3Rha2luZ0ZlZUxhbXAudmFsdWUpCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgX3lpZWxkJGdmJGluaXRGYXJtV2FsID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICBmYXJtID0gX3lpZWxkJGdmJGluaXRGYXJtV2FsLmZhcm07CiAgICAgICAgICAgICAgICBjdHguZW1pdCgnbmV3LWZhcm0nLCBmYXJtLnB1YmxpY0tleS50b0Jhc2U1OCgpKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIGluaXRGYXJtKCkgewogICAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwoKICAgIHJldHVybiB7CiAgICAgIHdhbGxldDogd2FsbGV0LAogICAgICBSZXdhcmRUeXBlOiBSZXdhcmRUeXBlLAogICAgICBtaW50QTogbWludEEsCiAgICAgIHR5cGVBOiB0eXBlQSwKICAgICAgbWludEI6IG1pbnRCLAogICAgICB0eXBlQjogdHlwZUIsCiAgICAgIG1pblN0YWtpbmdQZXJpb2RTZWM6IG1pblN0YWtpbmdQZXJpb2RTZWMsCiAgICAgIGNvb2xkb3duUGVyaW9kU2VjOiBjb29sZG93blBlcmlvZFNlYywKICAgICAgdW5zdGFraW5nRmVlTGFtcDogdW5zdGFraW5nRmVlTGFtcCwKICAgICAgaW5pdEZhcm06IGluaXRGYXJtCiAgICB9OwogIH0KfSk7"},{"version":3,"sources":["/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/mayank/gemwork_3/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/mayank/gemwork_3/gem-farm/app/gem-farm/src/components/gem-farm/InitFarm.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport useWallet from '../../composables/wallet';\nimport useCluster from '../../composables/cluster';\nimport { initGemFarm } from '@/common/gem-farm';\nimport { PublicKey } from '@solana/web3.js';\nimport { BN } from '@project-serum/anchor';\nimport { RewardType } from '@gemworks/gem-farm-ts';\n\nexport default defineComponent({\n  emits: ['new-farm'],\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      gf = await initGemFarm(getConnection(), getWallet()!);\n    });\n\n    //needed coz mounts later\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n      }\n    });\n\n    // --------------------------------------- init farm\n    const mintA = ref<string>();\n    const typeA = ref<any>(RewardType.Variable);\n    const mintB = ref<string>();\n    const typeB = ref<any>(RewardType.Fixed);\n\n    const minStakingPeriodSec = ref<string>();\n    const cooldownPeriodSec = ref<string>();\n    const unstakingFeeLamp = ref<string>();\n\n    const initFarm = async () => {\n      const { farm } = await gf.initFarmWallet(\n        new PublicKey(mintA.value!),\n        typeA.value,\n        new PublicKey(mintB.value!),\n        typeB.value,\n        {\n          minStakingPeriodSec: new BN(minStakingPeriodSec.value!),\n          cooldownPeriodSec: new BN(cooldownPeriodSec.value!),\n          unstakingFeeLamp: new BN(unstakingFeeLamp.value!),\n        }\n      );\n\n      ctx.emit('new-farm', farm.publicKey.toBase58());\n    };\n\n    return {\n      wallet,\n      RewardType,\n      mintA,\n      typeA,\n      mintB,\n      typeB,\n      minStakingPeriodSec,\n      cooldownPeriodSec,\n      unstakingFeeLamp,\n      initFarm,\n    };\n  },\n});\n"],"sourceRoot":""}]}